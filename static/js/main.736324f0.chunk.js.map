{"version":3,"sources":["Components/Diff/index.js","App.js","serviceWorker.js","index.js"],"names":["newlineRegex","fnMap","chars","diffChars","words","diffWords","wordsWithSpace","diffWordsWithSpace","lines","diffLines","trimmedLines","diffTrimmedLines","sentences","diffSentences","css","diffCss","json","diffJson","array","diffArrays","ReactDiff","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","escape","str","split","map","line","index","match","React","createElement","className","key","displayName","defaultProps","inputA","inputB","type","options","_this2","result","props","part","added","react_default","a","value","removed","Component","PNF","require","PhoneNumberFormat","phoneUtil","PhoneNumberUtil","getInstance","noExcepetion","func","ret","err","App","correctTel","number","parse","format","INTERNATIONAL","join","state","input","corrected","event","newValue","target","setState","objectSpread","href","rel","react_textarea_autosize_esm_browser","onChange","e","handleChange","Diff_ReactDiff","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736324f0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport {\n  diffChars,\n  diffArrays,\n  diffWords,\n  diffWordsWithSpace,\n  diffLines,\n  diffTrimmedLines,\n  diffSentences,\n  diffCss,\n  diffJson\n} from \"diff\";\n\n/**\n * Display diff in a stylable form.\n *\n * Default is character diff. Change with props.type. Valid values\n * are 'chars', 'words', 'sentences', 'json'.\n *\n *  - Wrapping div has class 'Difference', override with props.className\n *  - added parts are in <ins>\n *  - removed parts are in <del>\n *  - unchanged parts are in <span>\n *\n * Origi\n */\n\nconst newlineRegex = /(\\r\\n|\\n\\r|\\r|\\n)/g;\n\nconst fnMap = {\n  chars: diffChars,\n  words: diffWords,\n  wordsWithSpace: diffWordsWithSpace,\n  lines: diffLines,\n  trimmedLines: diffTrimmedLines,\n  sentences: diffSentences,\n  css: diffCss,\n  json: diffJson,\n  array: diffArrays\n};\n\nexport default class ReactDiff extends React.Component {\n  // static propTypes = {\n  //   inputA: React.PropTypes.oneOfType([\n  //     React.PropTypes.string,\n  //     React.PropTypes.object,\n  //   ]),\n  //   inputB: React.PropTypes.oneOfType([\n  //     React.PropTypes.string,\n  //     React.PropTypes.object,\n  //   ]),\n  //   type: React.PropTypes.oneOf([\n  //     'chars',\n  //     'words',\n  //     'wordsWithSpace',\n  //     'lines',\n  //     'trimmedLines',\n  //     'sentences',\n  //     'css',\n  //     'json',\n  //   ]),\n  //   options: React.PropTypes.object,\n  //   className: React.PropTypes.string,\n  // };\n\n  constructor() {\n    super();\n    this.displayName = \"Diff\";\n\n    this.defaultProps = {\n      inputA: \"\",\n      inputB: \"\",\n      type: \"chars\",\n      options: null,\n      className: \"difference\"\n    };\n  }\n\n  escape = str => {\n    return str.split(newlineRegex).map(function(line, index) {\n      if (line.match(newlineRegex)) {\n        return [\n          React.createElement(\"span\", { className: \"Diff-br\" }, \"¶\"),\n          React.createElement(\"br\", { key: index })\n        ];\n      } else {\n        return line;\n      }\n    });\n  };\n\n  render() {\n    const diff = fnMap[this.props.type || \"lines\"](\n      this.props.inputA,\n      this.props.inputB,\n      this.props.options\n    );\n\n    const result = diff.map((part, index) => {\n      if (part.added) {\n        return (\n          <ins className=\"Diff-Ins\" key={index}>\n            {this.escape(part.value)}\n          </ins>\n        );\n      }\n      if (part.removed) {\n        return (\n          <del className=\"Diff-Del\" key={index}>\n            {this.escape(part.value)}\n          </del>\n        );\n      }\n      return (\n        <span className=\"Diff-None\" key={index}>\n          {this.escape(part.value)}\n        </span>\n      );\n    });\n\n    return <div className={this.props.className}>{result}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Diff from \"./Components/Diff\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\n// Require `PhoneNumberFormat`.\nconst PNF = require(\"google-libphonenumber\").PhoneNumberFormat;\n\n// Get an instance of `PhoneNumberUtil`.\nconst phoneUtil = require(\"google-libphonenumber\").PhoneNumberUtil.getInstance();\n\nconst newlineRegex = /(\\r\\n|\\n\\r|\\r|\\n)/g;\n\nconst noExcepetion = func => {\n  let ret;\n  try {\n    ret = func();\n  } catch (err) {\n    ret = \"\";\n  } finally {\n    return ret;\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"...Type your numbers here ...\",\n      corrected: \"\"\n    };\n  }\n\n  correctTel = str => {\n    return str\n      .split(\"\\n\")\n      .map(function(line, index) {\n        if (line.match(/^[0-9+()-/–. ]+$/)) {\n          const number = noExcepetion(() => phoneUtil.parse(line, \"DE\"));\n\n          if (number) {\n            return phoneUtil.format(number, PNF.INTERNATIONAL);\n          }\n        }\n\n        return line;\n      })\n      .join(\"\\n\");\n  };\n\n  escape = str => {\n    return str.split(newlineRegex).map(function(line, index) {\n      if (line.match(newlineRegex)) {\n        return [\n          // React.createElement(\"span\", { className: \"br\" }, \"¶\"),\n          React.createElement(\"br\", { key: index })\n        ];\n      } else {\n        return line;\n      }\n    });\n  };\n\n  handleChange(event) {\n    let newValue = event.target.value;\n\n    this.setState({\n      ...this.state,\n      input: newValue,\n      corrected: this.correctTel(newValue)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Telephone Numbers according to{\" \"}\n            <a\n              target=\"_blank\"\n              className=\"App-Link\"\n              href=\"https://www.itu.int/rec/T-REC-E.123-200102-I/en\"\n              rel=\"noreferrer noopener nofollow\"\n            >\n              ITU-T Recommendation E.123\n            </a>\n          </p>\n        </header>\n\n        <div className=\"App-Diff\">\n          <div className=\"App-Line\">\n            <div className=\"App-Left\">\n              <label>\n                <TextareaAutosize\n                  value={this.state.input}\n                  onChange={e => this.handleChange(e)}\n                />\n              </label>\n            </div>\n            <div className=\"App-Mid\">\n              {this.state.corrected && this.escape(this.state.corrected)}\n            </div>\n            <div className=\"App-Right\">\n              {<Diff inputA={this.state.input} inputB={this.state.corrected} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}